{"ast":null,"code":"const cheerio = require('cheerio');\nconst axios = require('axios');\nconst total_pages = [];\nconst album = []; //or no const\nconst song_links = [];\nconst song_album = [];\nnames = [];\nlinks = [];\ngenre = [];\ncover = [];\nartist = [];\nrelease = [];\nsong_name = [];\nid = [];\n\n//const getData = async url => \nasync function getData(url) {\n  page = true;\n  let counter = 1;\n  while (page) {\n    temp = url + String(counter); //https://kgasa.com/album/page/1\n    try {\n      const response = await axios.get(temp);\n      const data = response.data;\n      const $ = cheerio.load(data);\n      if ($('.entry-title-link').length != 0)\n        //if title album data is not 0 extract data (albums exist in page)\n        {\n          total_pages.push(temp); //finding total pages of albums\n          console.log(total_pages);\n          counter++;\n          temp_names = $('.entry-title-link').get().map(x => $(x).text()); //array of albums in page\n          names = names.concat(temp_names); //pushing albums into final array\n\n          temp_links = $('.entry-image-link').get().map(x => $(x).attr('href')); //array of links in page\n          links = links.concat(temp_links); //pushing links into final array\n        } else\n        //title album data is = 0 (therefore no albums in page)\n        {\n          page = false; //break while loop with false condition\n        }\n    } catch (error) {\n      console.log(error);\n      page = false;\n    }\n  }\n  for (let i = 0; i < links.length; i++) {\n    try {\n      const response = await axios.get(links[i]);\n      const data = response.data;\n      const $ = cheerio.load(data);\n      count = [];\n      id.push(links.length - i);\n      temp = $('.wp-block-table.is-style-stripes td').first().text(); //locating table with album info\n\n      if (temp == 'Drama:' || temp == 'Webtoon:') {\n        temp = \"OST\";\n        genre.push(temp);\n        release.push('N/A');\n        artist.push('Various Artists');\n        temp_song_name = $('#genesis-content > article > div > figure:nth-child(11) > table > tbody > tr > td:nth-child(1) a:nth-child(1)').get().map(x => $(x).attr('href')); //REVISED//\n        //song_name.push(temp_song_name);\n        song_name = song_name.concat(temp_song_name);\n        for (let x = 0; x < temp_song_name.length; x++) {\n          song_album.push(links[i]);\n        }\n      } else {\n        temp = \"K-Pop\";\n        genre.push(temp);\n        count.push(i); //saving location of albums to match their release date\n        temp_release = $('.wp-block-table.is-style-stripes td').last().text();\n        release.push(temp_release);\n\n        //temp_artist = ($('.wp-block-table.is-style-stripes a').text());\n        temp_artist = $('.wp-block-table.is-style-stripes tr:nth-child(1) td:nth-child(2)').text(); //add a after nth-child(2) if some artists are missing\n        artist.push(temp_artist);\n\n        //temp_song_name = ($('#genesis-content > article > div > figure:nth-child(8) a').get().map(x => $(x).text()));\n        //temp_song_name = ($('.wp-block-table td:nth-child(2) a').get().map(x => $(x).text()));\n        html_table = $('.wp-block-table').last().html();\n        e = cheerio.load(html_table);\n\n        //console.log($('.wp-block-table table').length);\n\n        //write code here concept: if table 2 does not exist, run needed code; else do code from below\n        if ($('.wp-block-table table').length == 1) {\n          temp_song_name = $('.entry-content ol li a:nth-child(1)').get().map(x => $(x).attr('href')); //REVISED//\n          //song_name.push(temp_song_name);\n          song_name = song_name.concat(temp_song_name);\n          for (let x = 0; x < temp_song_name.length; x++) {\n            song_album.push(links[i]);\n          }\n        } else {\n          temp_song_name = e('td:nth-child(2) a:nth-child(1)').get().map(x => e(x).attr('href')); //REVISED//\n          //song_name.push(temp_song_name);\n          song_name = song_name.concat(temp_song_name);\n          for (let x = 0; x < temp_song_name.length; x++) {\n            song_album.push(links[i]);\n          }\n        }\n        //song_name.push(temp_song_name);\n        //song_name = song_name.concat(temp_song_name);\n      }\n\n      img = $('.singular-image').attr('data-src');\n      cover.push(img);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  console.log(song_name.length);\n  console.log(names.length);\n  for (let i = 0; i < song_name.length; i++) {\n    song_links.push(song_name[i]);\n  }\n  for (let i = 0; i < names.length; i++) {\n    //tmp = tmp.concat(song_name[i]);\n    //s.push(tmp);\n\n    album.push({\n      ID: id[i],\n      Name: names[i],\n      Album: links[i],\n      Cover: cover[i],\n      Genre: genre[i],\n      Artist: artist[i],\n      Release: release[i]\n    });\n\n    //album.push({Album: names[i], Link: links[i], Cover: cover[i], Genre: genre[i], Artist: artist[i], Release: release[i], Songs: [{Name: s }] });\n    //album.push({Album: names[i], Link: links[i], Cover: cover[i], Genre: genre[i], Artist: artist[i], Release: release[i], Songs: { Name: song_name[i]}});\n  }\n\n  console.log('Albums Complete');\n  //return album;\n  return {\n    array1: album,\n    array2: song_links,\n    array3: song_album\n  };\n}\nmodule.exports = {\n  getData,\n  song_links,\n  album,\n  song_album\n};","map":{"version":3,"names":["cheerio","require","axios","total_pages","album","song_links","song_album","names","links","genre","cover","artist","release","song_name","id","getData","url","page","counter","temp","String","response","get","data","$","load","length","push","console","log","temp_names","map","x","text","concat","temp_links","attr","error","i","count","first","temp_song_name","temp_release","last","temp_artist","html_table","html","e","img","ID","Name","Album","Cover","Genre","Artist","Release","array1","array2","array3","module","exports"],"sources":["C:/Users/risor/Documents/JavaScript/Scraper (Cheerio)/src/albums.js"],"sourcesContent":["const cheerio = require('cheerio');\r\nconst axios = require('axios');\r\n\r\nconst total_pages = [];\r\nconst album = []; //or no const\r\nconst song_links = [];\r\nconst song_album = [];\r\nnames = [];\r\nlinks = [];\r\ngenre = [];\r\ncover = [];\r\nartist = [];\r\nrelease = [];\r\nsong_name = [];\r\nid = [];\r\n\r\n//const getData = async url => \r\nasync function getData(url)\r\n{\r\n    page = true;\r\n    let counter = 1;\r\n    while(page)\r\n    {     \r\n        temp = url + String(counter); //https://kgasa.com/album/page/1\r\n        try \r\n        {\r\n            const response = await axios.get(temp);\r\n            const data = response.data;\r\n            const $ = cheerio.load(data);\r\n\r\n            if ($('.entry-title-link').length != 0)    //if title album data is not 0 extract data (albums exist in page)\r\n            {\r\n                total_pages.push(temp); //finding total pages of albums\r\n                console.log(total_pages);\r\n                counter++;\r\n\r\n                temp_names = ($('.entry-title-link').get().map(x => $(x).text())); //array of albums in page\r\n                names = names.concat(temp_names); //pushing albums into final array\r\n\r\n                temp_links = $('.entry-image-link').get().map(x => $(x).attr('href')); //array of links in page\r\n                links = links.concat(temp_links); //pushing links into final array\r\n            }\r\n            else //title album data is = 0 (therefore no albums in page)\r\n            {\r\n                page = false; //break while loop with false condition\r\n            }\r\n        }\r\n        catch (error) \r\n        {\r\n            console.log(error);\r\n            page = false;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < links.length; i++)\r\n    {\r\n        try\r\n        {\r\n            const response = await axios.get(links[i]);\r\n            const data = response.data;\r\n            const $ = cheerio.load(data);\r\n            count = [];\r\n\r\n            id.push(links.length - i);\r\n\r\n            temp = ($('.wp-block-table.is-style-stripes td').first().text()); //locating table with album info\r\n\r\n            if (temp == 'Drama:' || temp == 'Webtoon:')\r\n            {\r\n                temp = \"OST\";\r\n                genre.push(temp);\r\n                \r\n                release.push('N/A');\r\n                artist.push('Various Artists');\r\n\r\n                temp_song_name = $('#genesis-content > article > div > figure:nth-child(11) > table > tbody > tr > td:nth-child(1) a:nth-child(1)').get().map(x => $(x).attr('href')); //REVISED//\r\n                //song_name.push(temp_song_name);\r\n                song_name = song_name.concat(temp_song_name);\r\n\r\n                for (let x = 0; x < temp_song_name.length; x++)\r\n                {\r\n                    song_album.push(links[i]);\r\n                }\r\n            }\r\n           \r\n            else\r\n            {\r\n                temp = \"K-Pop\";\r\n                genre.push(temp);\r\n\r\n                count.push(i); //saving location of albums to match their release date\r\n                temp_release = ($('.wp-block-table.is-style-stripes td').last().text());\r\n                release.push(temp_release);\r\n\r\n                //temp_artist = ($('.wp-block-table.is-style-stripes a').text());\r\n                temp_artist = ($('.wp-block-table.is-style-stripes tr:nth-child(1) td:nth-child(2)').text()); //add a after nth-child(2) if some artists are missing\r\n                artist.push(temp_artist);\r\n\r\n                //temp_song_name = ($('#genesis-content > article > div > figure:nth-child(8) a').get().map(x => $(x).text()));\r\n                //temp_song_name = ($('.wp-block-table td:nth-child(2) a').get().map(x => $(x).text()));\r\n                html_table = ($('.wp-block-table').last().html());\r\n                e = cheerio.load(html_table);\r\n\r\n                //console.log($('.wp-block-table table').length);\r\n\r\n                //write code here concept: if table 2 does not exist, run needed code; else do code from below\r\n                if ($('.wp-block-table table').length == 1)\r\n                {\r\n                    temp_song_name = $('.entry-content ol li a:nth-child(1)').get().map(x => $(x).attr('href')); //REVISED//\r\n                    //song_name.push(temp_song_name);\r\n                    song_name = song_name.concat(temp_song_name);\r\n\r\n                    for (let x = 0; x < temp_song_name.length; x++)\r\n                    {\r\n                        song_album.push(links[i]);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    temp_song_name = (e('td:nth-child(2) a:nth-child(1)').get().map(x => e(x).attr('href'))); //REVISED//\r\n                    //song_name.push(temp_song_name);\r\n                    song_name = song_name.concat(temp_song_name);\r\n\r\n                    for (let x = 0; x < temp_song_name.length; x++)\r\n                    {\r\n                        song_album.push(links[i]);\r\n                    }\r\n                }\r\n                //song_name.push(temp_song_name);\r\n                //song_name = song_name.concat(temp_song_name);\r\n            }\r\n\r\n            img = ($('.singular-image').attr('data-src'));\r\n            cover.push(img);\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    console.log(song_name.length);\r\n    console.log(names.length);\r\n\r\n    for (let i = 0; i < song_name.length; i++)\r\n    {\r\n        song_links.push(song_name[i]);\r\n    }\r\n\r\n    for (let i = 0; i < names.length; i++)\r\n    {\r\n        //tmp = tmp.concat(song_name[i]);\r\n        //s.push(tmp);\r\n\r\n        album.push({ID: id[i], Name: names[i], Album: links[i], Cover: cover[i], Genre: genre[i], Artist: artist[i], Release: release[i] });\r\n        \r\n        //album.push({Album: names[i], Link: links[i], Cover: cover[i], Genre: genre[i], Artist: artist[i], Release: release[i], Songs: [{Name: s }] });\r\n        //album.push({Album: names[i], Link: links[i], Cover: cover[i], Genre: genre[i], Artist: artist[i], Release: release[i], Songs: { Name: song_name[i]}});\r\n    }\r\n    console.log('Albums Complete');\r\n    //return album;\r\n    return { array1: album, array2: song_links, array3: song_album }\r\n}\r\n\r\nmodule.exports = { getData, song_links, album, song_album };\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}